// Automatically generated by MockGen. DO NOT EDIT!
// Source: column.go

package mock_gotable

import (
	gomock "github.com/golang/mock/gomock"
	. "github.com/tomcraven/gotable"
)

// Mock of Column interface
type MockColumn struct {
	ctrl     *gomock.Controller
	recorder *_MockColumnRecorder
}

// Recorder for MockColumn (not exported)
type _MockColumnRecorder struct {
	mock *MockColumn
}

func NewMockColumn(ctrl *gomock.Controller) *MockColumn {
	mock := &MockColumn{ctrl: ctrl}
	mock.recorder = &_MockColumnRecorder{mock}
	return mock
}

func (_m *MockColumn) EXPECT() *_MockColumnRecorder {
	return _m.recorder
}

func (_m *MockColumn) PrintHeader(_param0 Output) {
	_m.ctrl.Call(_m, "PrintHeader", _param0)
}

func (_mr *_MockColumnRecorder) PrintHeader(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PrintHeader", arg0)
}

func (_m *MockColumn) PrintCellAt(_param0 int, _param1 Output) {
	_m.ctrl.Call(_m, "PrintCellAt", _param0, _param1)
}

func (_mr *_MockColumnRecorder) PrintCellAt(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PrintCellAt", arg0, arg1)
}

func (_m *MockColumn) Push(_param0 interface{}) {
	_m.ctrl.Call(_m, "Push", _param0)
}

func (_mr *_MockColumnRecorder) Push(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Push", arg0)
}

func (_m *MockColumn) GetWidth() int {
	ret := _m.ctrl.Call(_m, "GetWidth")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockColumnRecorder) GetWidth() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetWidth")
}
